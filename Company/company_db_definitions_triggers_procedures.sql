DROP DATABASE COMPANY;
CREATE DATABASE COMPANY;
USE COMPANY; #Default DB 

SET FOREIGN_KEY_CHECKS=0; #Disable ALL foreign key constraint checks

CREATE TABLE EMPLOYEE
	(Fname	VARCHAR(15)	NOT NULL,
	 Minit	CHAR,
	Lname	VARCHAR(15)	NOT NULL,
	Ssn	CHAR(9)		NOT NULL,
    Bdate	DATE,
    Address	VARCHAR(30),
    Sex	CHAR,
    SALARY	DECIMAL(10,2),
    Super_ssn	CHAR(9),
    Dno	INT	NOT NULL,
    PRIMARY KEY(Ssn),
    CONSTRAINT FKSuper FOREIGN KEY(Super_ssn) REFERENCES EMPLOYEE(Ssn),
	CONSTRAINT EDept FOREIGN KEY(Dno) REFERENCES DEPARTMENT(Dnumber)
    );

CREATE TABLE DEPARTMENT
	(Dname	VARCHAR(15)	NOT NULL,
	Dnumber	INT,
	Mgr_ssn	VARCHAR(15)	NOT NULL,
	Mgr_start_date  DATE		NOT NULL,
    PRIMARY KEY (Dnumber),
	UNIQUE(Dname),
    FOREIGN KEY(Mgr_ssn) REFERENCES EMPLOYEE(Ssn));

CREATE TABLE DEPT_LOCATIONS
	(Dnumber	INT		NOT NULL,
	Dlocation	VARCHAR(15)	NOT NULL,
    PRIMARY KEY(Dnumber, Dlocation),
    FOREIGN KEY(Dnumber)
    REFERENCES DEPARTMENT(Dnumber));

CREATE TABLE PROJECT
	(Pname	VARCHAR(15)	NOT NULL,
	Pnumber	INT		NOT NULL,
	Plocation 	VARCHAR(15),
	Dnum	INT		NOT NULL,
    PRIMARY KEY (Pnumber),
	FOREIGN KEY (Dnum) REFERENCES DEPARTMENT(Dnumber));

CREATE TABLE WORKS_ON
	(Essn	CHAR(9)		NOT NULL,
	Pno	INT		NOT NULL,
	Hours	DECIMAL(3,1),
	PRIMARY KEY (Essn, Pno),
    FOREIGN KEY (Essn) REFERENCES EMPLOYEE(Ssn),
	FOREIGN KEY (Pno) REFERENCES PROJECT(Pnumber));                                        

CREATE TABLE DEPENDENT
	(Essn	CHAR(9) 	NOT NULL,
	Dependent_name  VARCHAR(15)	NOT NULL,
    Sex	CHAR,
	Bdate	DATE,
	Relationship	VARCHAR(8),
    PRIMARY KEY(Essn, Dependent_name),
	FOREIGN KEY(Essn) REFERENCES EMPLOYEE(Ssn));
           
#Note that we cannot yet enable foreign keys due to EMPLOYEE and DEPARTMENT having NON-NULLABLE foreign keys.

           
INSERT INTO EMPLOYEE 
	VALUES
('John','B','Smith','123456789','1965-01-09','731 Fondren…','M',30000,'333445555',5),
('Franklin','T','Wong','333445555','1995-08-12','638 Voss …','M',40000,'888665555',5),
('Alicia','J','Zelaya','999887777','1968-01-19','3321 Castle…','F',25000,'987654321',4),
('Jennifer','S','Wallace','987654321','1941-06-20','291 Berry, …','F',43000,'888665555',4),
('Ramesh','K','Narayan','668884444','1962-09-15','975 Fire Oak…','M',38000,'333445555',5),
('Joyce','A','English','453453453','1972-07-31','5631 Rice,…','F',25000,'333445555',5),
('Ahmad','V','Jabbar','987987987','1969-03-29','980 Dallas,…','M',25000,'987654321',4),
('James','E','Borg','888665555','1937-11-10','450 Stone,…','M',55000,Null,1);
                 
INSERT INTO DEPARTMENT 
	VALUES
('Research',5,333445555,'1988-05-22'),
('Administration',4,987654321,'1995-01-01'),
('Headquarters',1,888665555,'1981-06-19');

INSERT INTO DEPT_LOCATIONS 
	VALUES
(1,'Houston'),
(4,'Stafford'),
(5,'Bellaire'),
(5,'Sugarland'),
(5,'Houston');

INSERT INTO PROJECT 
	VALUES
('ProductX',1,'Bellaire',5),
('ProductY',2,'Sugarland',5),
('ProductZ',3,'Houston',5),
('Computerization',10,'Stafford',4),
('Reorganization',20,'Houston',1),
('Newbenefits',30,'Stafford',4);

INSERT INTO WORKS_ON 
	VALUES
(123456789,1,32.5),
(123456789,2,7.5),
(668884444,3,40.0),
(453453453,1,20.0),
(453453453,2,20.0),
(333445555,2,10.0),
(333445555,3,10.0),
(333445555,10,10.0),
(333445555,20,10.0),
#(999887777,30,30.0),
#(999887777,10,10.0),
(987987987,10,35.0),
(987987987,30,5.0),
(987654321,30,20.0),
(987654321,20,15.0),
(888665555,20,Null);

INSERT INTO DEPENDENT 
	VALUES
(333445555,'Alice','F','1986-04-05','Daughter'),
(333445555,'Theodore','M','1983-10-25','Son'),
(333445555,'Joy','F','1958-05-03','Spouse'),
(987654321,'Abner','M','1942-02-28','Spouse'),
(123456789,'Michael','M','1988-01-04','Son'),
(123456789,'Alice','F','1988-12-30','Daughter'),
(123456789,'Elizabeth','F','1967-05-05','Spouse');

SET FOREIGN_KEY_CHECKS=1;

#VIEW 1b:
CREATE VIEW EMP_INFO AS #Fixed View
SELECT * FROM 
(SELECT Ssn, COUNT(Dependent_name) AS NumDep
FROM EMPLOYEE LEFT JOIN DEPENDENT ON Ssn = Essn
GROUP BY Ssn) AS T
NATURAL JOIN
(SELECT Ssn, COUNT(Pno) AS NumProj, IFNULL(SUM(HOURS), 0) As CHours
FROM EMPLOYEE LEFT JOIN WORKS_ON ON Ssn = Essn
GROUP BY Ssn) AS T2; 

CREATE TABLE FINADJ #This "log" table is used to test later TRIGGERS and STORED PROCEDURES
	(AdjID int NOT NULL AUTO_INCREMENT,
    Essn	CHAR(9)	NOT NULL,
    Reason VARCHAR(30) NOT NULL,
    RValue VARCHAR(30),
    AdjTime DATETIME NOT NULL,
    FOREIGN KEY (Essn) REFERENCES EMPLOYEE(Ssn), 
    PRIMARY KEY (AdjID));

#TRIGGER 1
DELIMITER &&
CREATE TRIGGER max_dependents_insert
BEFORE INSERT ON DEPENDENT
FOR EACH ROW
BEGIN
	IF (SELECT COUNT(*) FROM DEPENDENT WHERE Essn=NEW.Essn)>2
		THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT="Limit of 3 dependents (INS)";
	END IF;
END&&
DELIMITER;
	
#TRIGGER 2    
DELIMITER &&
CREATE TRIGGER max_dependents_update
BEFORE UPDATE ON DEPENDENT
FOR EACH ROW
BEGIN
	IF (SELECT COUNT(*) FROM DEPENDENT WHERE Essn=NEW.Essn)>2
		THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT="Limit of 3 dependents (UPD)";
	END IF;
END&&
DELIMITER ;
    
#TRIGGER 3     
DELIMITER &&
CREATE TRIGGER depchange_ins
AFTER INSERT ON DEPENDENT
FOR EACH ROW
BEGIN
	SET @depchange=@depchange+1;
END&&
DELIMITER ;

#TRIGGER 4     
DELIMITER &&
CREATE TRIGGER depchange_del
AFTER DELETE ON DEPENDENT
FOR EACH ROW
BEGIN
	SET @depchange=@depchange-1;
END&&
DELIMITER ;

#TRIGGER 5     
DELIMITER &&
CREATE TRIGGER invalidbdate
BEFORE INSERT ON DEPENDENT
FOR EACH ROW
BEGIN
	IF NEW.Bdate>now()
		THEN SET NEW.Bdate=now();
	END IF;
END&&
DELIMITER ;

#STORED PROCEDURE INSADJ
DELIMITER &&
CREATE PROCEDURE INSADJ (IN Essn CHAR(9), IN Reason VARCHAR(30), IN RValue VARCHAR(30))
BEGIN
	INSERT INTO FINADJ 
	VALUES
	(NULL,Essn,Reason,RValue,now());
END&&
DELIMITER ;

#TRIGGER 6     
DELIMITER &&
CREATE TRIGGER adjdepchange_add
AFTER INSERT ON DEPENDENT
FOR EACH ROW
BEGIN
	CALL INSADJ(NEW.Essn,'ADDED DEPENDENT',NEW.Dependent_name);
END&&
DELIMITER ;

#TRIGGER 7     
DELIMITER &&
CREATE TRIGGER adjdepchange_del
AFTER DELETE ON DEPENDENT
FOR EACH ROW
BEGIN
	CALL INSADJ(OLD.Essn,'REMOVED DEPENDENT',OLD.Dependent_name);
END&&
DELIMITER ;


#TRIGGER 8     
DELIMITER &&
CREATE TRIGGER adjsalchange_upd
AFTER UPDATE ON EMPLOYEE
FOR EACH ROW
BEGIN
	IF NEW.SALARY<>OLD.SALARY
		THEN CALL INSADJ(NEW.Ssn,'SALARY CHANGE',NEW.SALARY-OLD.SALARY);
	END IF;
END&&
DELIMITER ;

#STORED PROCEDURE MAXPROJWORKER
DELIMITER &&
CREATE PROCEDURE MAXPROJWORKER (IN PROJNUM INT, OUT MAXWORKER CHAR(9), OUT MAXHOURS DECIMAL(3,1))
BEGIN
	SELECT Essn,Hours INTO MAXWORKER,MAXHOURS FROM WORKS_ON WHERE
	Hours=(SELECT MAX(Hours)
    WHERE Pno=PROJNUM)
    LIMIT 1;
END&&
DELIMITER ;
